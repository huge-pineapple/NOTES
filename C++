// c++ 编译的程序占用的内存
一、四个部分：

1. 栈区(stack)：由编译器自动分配释放，存放函数参数值，局部变量的值等，操作类似于数据结构中的栈。
栈内存分配内置于处理器的指令集，分配效率高但是内存容量有限，不会产生内存碎片，向着内存地址减小的方向生长；
2. 堆区(heap)：由程序员自动分配释放，若程序员不释放，容易导致内存泄漏，程序结束时可能由OS回收。
堆内存分配类似于链表，分配效率低但是内存容量大，频繁的分配和释放不同大小的堆空间将会产生内存碎片，向着内存地址增加的方向生长；
3. 全局区(static)：程序结束后由系统释放，存放全局变量和静态变量。
初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。
全局区内存在程序编译时已经分配好，并存在于程序的整个运行期间；
4、文字常量区 ：程序结束后由系统释放，存放常量字符串； 
5、程序代码区：存放函数体的二进制代码。

二、申请和响应不同：

1、申请方式：stack由系统自动分配，heap需要程序员自己申请，C中用函数malloc分配空间，用free释放，C++用new分配，用delete释放。
2、申请后系统的响应：
栈：只要栈的剩余空间大于所申请的空间，体统将为程序提供内存，否则将报异常提示栈溢出。
堆：首先应该知道操作系统有一个记录内存地址的链表，
当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请的空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序。
对于大多数系统，会在这块内存空间中的首地址处记录本次分配的大小，这样代码中的delete或free语句就能够正确的释放本内存空间。
另外，由于找到的堆结点的大小不一定正好等于申请的大小，系统会将多余的那部分重新放入空闲链表中。

三、 申请的大小限制不同：

栈：在windows下，栈是向低地址扩展的数据结构，是一块连续的内存区域，栈顶的地址和栈的最大容量是系统预先规定好的，能从栈获得的空间较小。
堆：堆是向高地址扩展的数据结构，是不连续的内存区域，
这是由于系统是由链表在存储空闲内存地址，自然堆就是不连续的内存区域，且链表的遍历也是从低地址向高地址遍历的，
堆的大小受限于计算机系统的有效虚拟内存空间，由此空间，堆获得的空间比较灵活，也比较大。
四、申请的效率不同：
栈：栈由系统自动分配，速度快，但是程序员无法控制。
堆：堆是有程序员自己分配，速度较慢，容易产生碎片，不过用起来方便。
五、堆和栈的存储内容不同：
栈：在函数调用时，第一个进栈的是主函数中函数调用后的下一条指令的地址，然后是函数的各个参数，
在大多数的C编译器中，参数是从右往左入栈的，当本次函数调用结束后，局部变量先出栈，然后是参数，
最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令。
堆：一般是在堆得头部用一个字节存放堆得大小，具体内容由程序员安排。

// const的一些用法

T* const p = &i; // 指针指向的对象可以改变，但指针本身的值不可以改变

  int i1 = 10;
  int i2 = 15;
  int* const p = &i1 // 正确，声明需初始化
  i1 = 20; // 正确，指针指向的对象可以改变
  p = &i2 // 错误，指针本身的值不可以改变
  
const T* p = &j; // 指针指向的对象不可以改变，但指针本身的值可以改变

  int j1 = 10;
  int j2 = 15;
  const int* p = &j1; // 正确，声明需初始化
  p = &j2; // 正确，指针本身的值可以改变
  j2 = 20; // 错误，指针指向的对象不可以改变
  
const T* const p = &k; // 指针指向对象和指针本身的值都不可改变
const T& value // 常量引用，不能改变引用的值

  int value = 5;
  const int& constValue = value; // 正确，允许绑定同类型的非常量
  constValue = 10; // 错误，不能改变引用的值
  value = 15; // 正确，可以改变原值对constValue赋值
  
T func() const {} // 这里的const是限定*this指针，因为this是隐含参数，所以采用这种形式
因此，函数中不能有任何改变其所属对象成员变量值的功能，否则会在编译阶段就报错

// this指针

  this 是 const 指针，指向当前使用的对象。它的值是不能被修改的，一切企图修改该指针的操作，如赋值、递增、递减等都是不允许的
  this 只能在成员函数内部使用，用在其他地方没有意义，也是非法的
  只有当对象被创建后 this 才有意义，因此不能在 static 成员函数中使用

// 虚函数的使用

  存在于基类中，允许派生类重写该函数，避免出现一个派生类就重载一次该函数这样的冗余情况出现。
  class base
  {
    public:
      virtual void example1(); // 虚函数
      virtual void example2() = 0; // 纯虚函数。作用：一、避免基类被实例化；二、避免函数example2()被要求在派生类中重新实现，却没有重新
                                                     实现的情况发生。（两种情况编译都无法通过，方便找出bug）
  }
 
// 函数指针

  double example(int x){return 0;} // 函数原型示例
  double (*E)(int) // 函数指针示例
  E = example; // 函数指针赋值
  double y = example(int x); // 函数调用
  double y = (*E)(int x); // 通过函数指针调用函数的推荐写法
  double example2(int y, double (*E)(int x)); // 函数指针作为参数传递

// double 比较大小
  
  const double eps = 1x10e-6; // 一般精度设置负6次方就可以了，视情况而定
  double a, b;
  if(a> b+eps);
  if(fabs(a-b)<eps); // 判断相等

// 多线程调用类成员函数

1. 调用函数没有重载： std::thread t1(&[类名]::[成员函数名](函数指针), &[类实例](对象指针), args[]);
2. 调用函数有重载： 
  using memfunc_type = [ret-type] ([类名]::*)(type args[]); // c++11 使用using 代替 typedef, memfunc_type 实为函数指针
  memfunc_type memfunc = &[类名]::[成员函数名];
  std::thread t2(memfunc, &[类实例](对象指针), args[]);

// c++11 好用的新特性

1. auto 在stl容器上表现突出，不保留const
   decltype 推导表达式值类型，但不计算表达式，并且能保留const
2. 基于范围的for循环 
ex1 int Arr[5]{1,2,3,4,5}; for(int &x:Arr); 
基于范围的for循环一般在循环开始之前就确定好迭代的范围，而不是在每次迭代之前去调用一次Arr.end()
3. Lambda函数
[capture](params)->ret { body};

[ ]         ：无捕获，函数体内不能访问任何外部变量 
[ =]        ：以值（拷贝）的方式捕获所有外部变量，函数体内可以访问，但是不能修改。
[ &]        ：以引用的方式捕获所有外部变量，函数体内可以访问并修改（需要当心无效的引用）；
[ var]      ：以值（拷贝）的方式捕获某个外部变量，函数体可以访问但不能修改。
[ &var]     ：以引用的方式获取某个外部变量，函数体可以访问并修改
[ this]     ：捕获this指针，可以访问类的成员变量和函数，
[ =,&var]   ：引用捕获变量var，其他外部变量使用值捕获。
[ &,var]    ：只捕获变量var，其他外部变量使用引用捕获。
ex3
auto f1 = [=](){ return x; };                       //以值方式捕获使用变量，不能修改
auto f2 = [&](){ return ++x; };                  //以引用方式捕获所有变量，可以修改，但要当心引用无效
auto f3 = [x](){ return x; };                      //以值方式捕获x，不能修改
auto f4 = [x,&y](){ y += x; };                    //以值方式捕获x，以引用方式捕获y，y可以修改
auto f5 = [&,y](){ x += y;};                      //以引用方式捕获y之外所有变量，y不能修改
auto f6 = [&](){ y += ++x;};                    //以引用方式捕获所有变量，可以修改
auto f7 = [](){ return x ;};                      //无捕获，不能使用外部变量，编译错误
4. 后置返回类型
ex4 
template <typename T, typename U>
auto add(T t, U u) -> decltype(t + u) {
    return t + u;
}
auto SomeStruct::add(int x, int y) -> int {
    return x + y;
} // 也可以不用decltype, 显式给出类型int
5. override和final
virtual void example1() override;  // 编译器将去检查基类中有没有一个具有相同签名的虚函数，如果没有，编译器就会报错
class Base final {};
virtual void example2() final; // 防止基类被继承和防止子类重写函数
6. tuple类型
template <class ...Types> class tuple;
7. enum class 强类型枚举
C++11 使用枚举的成员要加类作用域符
ex7 enum class example
{ var1 = 0; var2 = 1;}
example::var1;
8. default 在自定义构造函数后，强制编译器生成无参构造函数
class ex8
{ public:
    ex8(int _num){num = _num;} 
    ex8() = default;
  private:
    int num;}
9. 不同构造函数间可以相互调用
10. c++11 出现constexpt关键字 c++14 改为constexpt返回值函数, 只要求返回值和参数为字面值即可

// 深拷贝和浅拷贝

浅： 创建指针指向被拷贝内存
深： 创建指针，申请新内存空间，将被拷贝内存里对象复制到新内存中

// shared_ptr<> 循环引用问题

shared_ptr智能指针管理的对象，只有在引用计数减为0的时候才会释放。而循环引用发生的情况就是违反了上面所说的结论：引用计数不能递减到0，以至于对象不能释放。

https://blog.csdn.net/daniel_ustc/article/details/23096229?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&spm=1001.2101.3001.4242

解决办法，引入weak_ptr，它不能单独使用，只能配合shared_ptr使用。weak_ptr不能控制它所指向对象的生存期。
将一个weak_ptr绑定到一个shared_ptr不会改变shared_ptr的引用计数。一旦最后一个指向对象的shared_ptr被销毁，那么对象就会被释放。

// 内存泄露 

https://blog.csdn.net/lovely20085901/article/details/39050085

// vector 扩容

开辟一块原内存大小1.5倍的内存空间，将对象复制进去，并释放原内存
https://blog.csdn.net/rusbme/article/details/98102016

// cast

static_cast<> 用于不涉及继承机制的类型转换 int->double
const_cast<> 常量转变量
dynamic_cast<> 涉及继承机制，如基类转继承类
reinterpret_cast<> 全能转，尽量不使用

四种cast转换失败会抛出exception

// 三五原则

当重写了析构函数时，需要同时显示编写拷贝构造函数、赋值构造函数（三原则）、移动赋值构造函数、移动拷贝构造函数

// new 和 malloc的区别

1. malloc是C的库函数， new是C++运算符
2. 因此new可以进行重载，malloc不行
3. malloc申请的是OS中的堆内存空间， new申请的是自由存储区，自由存储区是编译器为new设定的特定概念，底层也是调用malloc，但是根据重载new也可以申请堆、栈等内存空间
4. malloc可以alloc，new不行
5. new自动计算申请的内存空间，malloc要工程师进行计算
6. delete时先调用对象的析构函数再释放内存，free直接释放内存
7. malloc内存申请失败返回null, new则抛出bad_alloc exception

// delete和delete[]

1. 对于基本数据类型，无需调用构造析构函数，所以无区别
2. 对于自建数据类型数组，new []返回数组首位地址，即数组中第一个对象的地址，delete只会调用一次析构函数就释放空间，delete[]则会为所有对象调用析构函数;

// 单例模式

1. 懒汉式
class Singleton
{
public:
    ~Singleton(){};
    Singleton(Singleton&) = delete;
    Singleton& operator=(const Singleton&) = delete;
    static Singleton& get_instance()
    {
        static Singleton instance;
        return instance;
    };
private:
    Singleton(){};
};

2. 饿汉式
class Singleton
{
private:
    Singleton(){};
    static Singleton* instance;
public:
    static Singleton* GetInstance()
    {
        return instance;
    }
};
